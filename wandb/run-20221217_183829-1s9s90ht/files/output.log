Using cuda device
Loading model
Weights loaded successfully
[tensor([714.2850, 717.9955, 720.7294, 721.7187, 721.1147, 725.2870, 734.6906,
        754.3926, 772.0634, 781.3292, 794.0064, 813.1118, 813.6375, 807.3794,
        774.6752, 751.1982, 740.2726, 712.8511, 700.3424, 682.0013, 653.6879,
        645.2933, 619.6188, 594.5703]), tensor([717.9955, 720.7294, 721.7187, 721.1147, 725.2870, 734.6906, 754.3926,
        772.0634, 781.3292, 794.0064, 813.1118, 813.6375, 807.3794, 774.6752,
        751.1982, 740.2726, 712.8511, 700.3424, 682.0013, 653.6879, 645.2933,
        619.6188, 594.5703, 574.2189]), tensor([720.7294, 721.7187, 721.1147, 725.2870, 734.6906, 754.3926, 772.0634,
        781.3292, 794.0064, 813.1118, 813.6375, 807.3794, 774.6752, 751.1982,
        740.2726, 712.8511, 700.3424, 682.0013, 653.6879, 645.2933, 619.6188,
        594.5703, 574.2189, 558.8356]), tensor([721.7187, 721.1147, 725.2870, 734.6906, 754.3926, 772.0634, 781.3292,
        794.0064, 813.1118, 813.6375, 807.3794, 774.6752, 751.1982, 740.2726,
        712.8511, 700.3424, 682.0013, 653.6879, 645.2933, 619.6188, 594.5703,
        574.2189, 558.8356, 548.9525]), tensor([721.1147, 725.2870, 734.6906, 754.3926, 772.0634, 781.3292, 794.0064,
        813.1118, 813.6375, 807.3794, 774.6752, 751.1982, 740.2726, 712.8511,
        700.3424, 682.0013, 653.6879, 645.2933, 619.6188, 594.5703, 574.2189,
        558.8356, 548.9525, 540.3274]), tensor([725.2870, 734.6906, 754.3926, 772.0634, 781.3292, 794.0064, 813.1118,
        813.6375, 807.3794, 774.6752, 751.1982, 740.2726, 712.8511, 700.3424,
        682.0013, 653.6879, 645.2933, 619.6188, 594.5703, 574.2189, 558.8356,
        548.9525, 540.3274, 538.8065]), tensor([734.6906, 754.3926, 772.0634, 781.3292, 794.0064, 813.1118, 813.6375,
        807.3794, 774.6752, 751.1982, 740.2726, 712.8511, 700.3424, 682.0013,
        653.6879, 645.2933, 619.6188, 594.5703, 574.2189, 558.8356, 548.9525,
        540.3274, 538.8065, 543.6509]), tensor([754.3926, 772.0634, 781.3292, 794.0064, 813.1118, 813.6375, 807.3794,
        774.6752, 751.1982, 740.2726, 712.8511, 700.3424, 682.0013, 653.6879,
        645.2933, 619.6188, 594.5703, 574.2189, 558.8356, 548.9525, 540.3274,
        538.8065, 543.6509, 545.8666]), tensor([772.0634, 781.3292, 794.0064, 813.1118, 813.6375, 807.3794, 774.6752,
        751.1982, 740.2726, 712.8511, 700.3424, 682.0013, 653.6879, 645.2933,
        619.6188, 594.5703, 574.2189, 558.8356, 548.9525, 540.3274, 538.8065,
        543.6509, 545.8666, 550.5728]), tensor([781.3292, 794.0064, 813.1118, 813.6375, 807.3794, 774.6752, 751.1982,
        740.2726, 712.8511, 700.3424, 682.0013, 653.6879, 645.2933, 619.6188,
        594.5703, 574.2189, 558.8356, 548.9525, 540.3274, 538.8065, 543.6509,
        545.8666, 550.5728, 555.2355]), tensor([794.0064, 813.1118, 813.6375, 807.3794, 774.6752, 751.1982, 740.2726,
        712.8511, 700.3424, 682.0013, 653.6879, 645.2933, 619.6188, 594.5703,
        574.2189, 558.8356, 548.9525, 540.3274, 538.8065, 543.6509, 545.8666,
        550.5728, 555.2355, 556.8427]), tensor([813.1118, 813.6375, 807.3794, 774.6752, 751.1982, 740.2726, 712.8511,
        700.3424, 682.0013, 653.6879, 645.2933, 619.6188, 594.5703, 574.2189,
        558.8356, 548.9525, 540.3274, 538.8065, 543.6509, 545.8666, 550.5728,
        555.2355, 556.8427, 559.6120]), tensor([813.6375, 807.3794, 774.6752, 751.1982, 740.2726, 712.8511, 700.3424,
        682.0013, 653.6879, 645.2933, 619.6188, 594.5703, 574.2189, 558.8356,
        548.9525, 540.3274, 538.8065, 543.6509, 545.8666, 550.5728, 555.2355,
        556.8427, 559.6120, 563.2107]), tensor([807.3794, 774.6752, 751.1982, 740.2726, 712.8511, 700.3424, 682.0013,
        653.6879, 645.2933, 619.6188, 594.5703, 574.2189, 558.8356, 548.9525,
        540.3274, 538.8065, 543.6509, 545.8666, 550.5728, 555.2355, 556.8427,
        559.6120, 563.2107, 566.9315]), tensor([774.6752, 751.1982, 740.2726, 712.8511, 700.3424, 682.0013, 653.6879,
        645.2933, 619.6188, 594.5703, 574.2189, 558.8356, 548.9525, 540.3274,
        538.8065, 543.6509, 545.8666, 550.5728, 555.2355, 556.8427, 559.6120,
        563.2107, 566.9315, 572.7253]), tensor([751.1982, 740.2726, 712.8511, 700.3424, 682.0013, 653.6879, 645.2933,
        619.6188, 594.5703, 574.2189, 558.8356, 548.9525, 540.3274, 538.8065,
        543.6509, 545.8666, 550.5728, 555.2355, 556.8427, 559.6120, 563.2107,
        566.9315, 572.7253, 578.4599]), tensor([740.2726, 712.8511, 700.3424, 682.0013, 653.6879, 645.2933, 619.6188,
        594.5703, 574.2189, 558.8356, 548.9525, 540.3274, 538.8065, 543.6509,
        545.8666, 550.5728, 555.2355, 556.8427, 559.6120, 563.2107, 566.9315,
        572.7253, 578.4599, 584.9499]), tensor([712.8511, 700.3424, 682.0013, 653.6879, 645.2933, 619.6188, 594.5703,
        574.2189, 558.8356, 548.9525, 540.3274, 538.8065, 543.6509, 545.8666,
        550.5728, 555.2355, 556.8427, 559.6120, 563.2107, 566.9315, 572.7253,
        578.4599, 584.9499, 590.6432]), tensor([700.3424, 682.0013, 653.6879, 645.2933, 619.6188, 594.5703, 574.2189,
        558.8356, 548.9525, 540.3274, 538.8065, 543.6509, 545.8666, 550.5728,
        555.2355, 556.8427, 559.6120, 563.2107, 566.9315, 572.7253, 578.4599,
        584.9499, 590.6432, 594.9163]), tensor([682.0013, 653.6879, 645.2933, 619.6188, 594.5703, 574.2189, 558.8356,
        548.9525, 540.3274, 538.8065, 543.6509, 545.8666, 550.5728, 555.2355,
        556.8427, 559.6120, 563.2107, 566.9315, 572.7253, 578.4599, 584.9499,
        590.6432, 594.9163, 598.1679]), tensor([653.6879, 645.2933, 619.6188, 594.5703, 574.2189, 558.8356, 548.9525,
        540.3274, 538.8065, 543.6509, 545.8666, 550.5728, 555.2355, 556.8427,
        559.6120, 563.2107, 566.9315, 572.7253, 578.4599, 584.9499, 590.6432,
        594.9163, 598.1679, 600.1431]), tensor([645.2933, 619.6188, 594.5703, 574.2189, 558.8356, 548.9525, 540.3274,
        538.8065, 543.6509, 545.8666, 550.5728, 555.2355, 556.8427, 559.6120,
        563.2107, 566.9315, 572.7253, 578.4599, 584.9499, 590.6432, 594.9163,
        598.1679, 600.1431, 600.6947]), tensor([619.6188, 594.5703, 574.2189, 558.8356, 548.9525, 540.3274, 538.8065,
        543.6509, 545.8666, 550.5728, 555.2355, 556.8427, 559.6120, 563.2107,
        566.9315, 572.7253, 578.4599, 584.9499, 590.6432, 594.9163, 598.1679,
        600.1431, 600.6947, 601.3828]), tensor([594.5703, 574.2189, 558.8356, 548.9525, 540.3274, 538.8065, 543.6509,
        545.8666, 550.5728, 555.2355, 556.8427, 559.6120, 563.2107, 566.9315,
        572.7253, 578.4599, 584.9499, 590.6432, 594.9163, 598.1679, 600.1431,
        600.6947, 601.3828, 601.2272]), tensor([574.2189, 558.8356, 548.9525, 540.3274, 538.8065, 543.6509, 545.8666,
        550.5728, 555.2355, 556.8427, 559.6120, 563.2107, 566.9315, 572.7253,
        578.4599, 584.9499, 590.6432, 594.9163, 598.1679, 600.1431, 600.6947,
        601.3828, 601.2272, 601.1898]), tensor([558.8356, 548.9525, 540.3274, 538.8065, 543.6509, 545.8666, 550.5728,
        555.2355, 556.8427, 559.6120, 563.2107, 566.9315, 572.7253, 578.4599,
        584.9499, 590.6432, 594.9163, 598.1679, 600.1431, 600.6947, 601.3828,
        601.2272, 601.1898, 600.9083]), tensor([548.9525, 540.3274, 538.8065, 543.6509, 545.8666, 550.5728, 555.2355,
        556.8427, 559.6120, 563.2107, 566.9315, 572.7253, 578.4599, 584.9499,
        590.6432, 594.9163, 598.1679, 600.1431, 600.6947, 601.3828, 601.2272,
        601.1898, 600.9083, 599.9451]), tensor([540.3274, 538.8065, 543.6509, 545.8666, 550.5728, 555.2355, 556.8427,
        559.6120, 563.2107, 566.9315, 572.7253, 578.4599, 584.9499, 590.6432,
        594.9163, 598.1679, 600.1431, 600.6947, 601.3828, 601.2272, 601.1898,
        600.9083, 599.9451, 598.3351]), tensor([538.8065, 543.6509, 545.8666, 550.5728, 555.2355, 556.8427, 559.6120,
        563.2107, 566.9315, 572.7253, 578.4599, 584.9499, 590.6432, 594.9163,
        598.1679, 600.1431, 600.6947, 601.3828, 601.2272, 601.1898, 600.9083,
        599.9451, 598.3351, 595.6432]), tensor([543.6509, 545.8666, 550.5728, 555.2355, 556.8427, 559.6120, 563.2107,
        566.9315, 572.7253, 578.4599, 584.9499, 590.6432, 594.9163, 598.1679,
        600.1431, 600.6947, 601.3828, 601.2272, 601.1898, 600.9083, 599.9451,
        598.3351, 595.6432, 591.8434]), tensor([545.8666, 550.5728, 555.2355, 556.8427, 559.6120, 563.2107, 566.9315,
        572.7253, 578.4599, 584.9499, 590.6432, 594.9163, 598.1679, 600.1431,
        600.6947, 601.3828, 601.2272, 601.1898, 600.9083, 599.9451, 598.3351,
        595.6432, 591.8434, 587.4345]), tensor([550.5728, 555.2355, 556.8427, 559.6120, 563.2107, 566.9315, 572.7253,
        578.4599, 584.9499, 590.6432, 594.9163, 598.1679, 600.1431, 600.6947,
        601.3828, 601.2272, 601.1898, 600.9083, 599.9451, 598.3351, 595.6432,
        591.8434, 587.4345, 582.4132]), tensor([555.2355, 556.8427, 559.6120, 563.2107, 566.9315, 572.7253, 578.4599,
        584.9499, 590.6432, 594.9163, 598.1679, 600.1431, 600.6947, 601.3828,
        601.2272, 601.1898, 600.9083, 599.9451, 598.3351, 595.6432, 591.8434,
        587.4345, 582.4132, 577.3982]), tensor([556.8427, 559.6120, 563.2107, 566.9315, 572.7253, 578.4599, 584.9499,
        590.6432, 594.9163, 598.1679, 600.1431, 600.6947, 601.3828, 601.2272,
        601.1898, 600.9083, 599.9451, 598.3351, 595.6432, 591.8434, 587.4345,
        582.4132, 577.3982, 572.6075]), tensor([559.6120, 563.2107, 566.9315, 572.7253, 578.4599, 584.9499, 590.6432,
        594.9163, 598.1679, 600.1431, 600.6947, 601.3828, 601.2272, 601.1898,
        600.9083, 599.9451, 598.3351, 595.6432, 591.8434, 587.4345, 582.4132,
        577.3982, 572.6075, 568.1771]), tensor([563.2107, 566.9315, 572.7253, 578.4599, 584.9499, 590.6432, 594.9163,
        598.1679, 600.1431, 600.6947, 601.3828, 601.2272, 601.1898, 600.9083,
        599.9451, 598.3351, 595.6432, 591.8434, 587.4345, 582.4132, 577.3982,
        572.6075, 568.1771, 564.2216]), tensor([566.9315, 572.7253, 578.4599, 584.9499, 590.6432, 594.9163, 598.1679,
        600.1431, 600.6947, 601.3828, 601.2272, 601.1898, 600.9083, 599.9451,
        598.3351, 595.6432, 591.8434, 587.4345, 582.4132, 577.3982, 572.6075,
        568.1771, 564.2216, 560.6367]), tensor([572.7253, 578.4599, 584.9499, 590.6432, 594.9163, 598.1679, 600.1431,
        600.6947, 601.3828, 601.2272, 601.1898, 600.9083, 599.9451, 598.3351,
        595.6432, 591.8434, 587.4345, 582.4132, 577.3982, 572.6075, 568.1771,
        564.2216, 560.6367, 557.2646]), tensor([578.4599, 584.9499, 590.6432, 594.9163, 598.1679, 600.1431, 600.6947,
        601.3828, 601.2272, 601.1898, 600.9083, 599.9451, 598.3351, 595.6432,
        591.8434, 587.4345, 582.4132, 577.3982, 572.6075, 568.1771, 564.2216,
        560.6367, 557.2646, 554.1632]), tensor([584.9499, 590.6432, 594.9163, 598.1679, 600.1431, 600.6947, 601.3828,
        601.2272, 601.1898, 600.9083, 599.9451, 598.3351, 595.6432, 591.8434,
        587.4345, 582.4132, 577.3982, 572.6075, 568.1771, 564.2216, 560.6367,
        557.2646, 554.1632, 551.1372])]
/usr/lib/python3/dist-packages/numpy/core/shape_base.py:65: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  ary = asanyarray(ary)
/usr/lib/python3/dist-packages/numpy/core/shape_base.py:65: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  ary = asanyarray(ary)
Traceback (most recent call last):
  File "/home/mespinoslonga/Documents/Project II - NSDTS Function Approximation/Power Demand Project/code/forecasting.py", line 51, in <module>
    net.prediction()
  File "/home/mespinoslonga/Documents/Project II - NSDTS Function Approximation/Power Demand Project/code/ANN.py", line 156, in prediction
    plt.plot(predictions, label="Predicted")
  File "/usr/lib/python3/dist-packages/matplotlib/pyplot.py", line 2757, in plot
    return gca().plot(
  File "/usr/lib/python3/dist-packages/matplotlib/axes/_axes.py", line 1634, in plot
    self.add_line(line)
  File "/usr/lib/python3/dist-packages/matplotlib/axes/_base.py", line 2283, in add_line
    self._update_line_limits(line)
  File "/usr/lib/python3/dist-packages/matplotlib/axes/_base.py", line 2306, in _update_line_limits
    path = line.get_path()
  File "/usr/lib/python3/dist-packages/matplotlib/lines.py", line 999, in get_path
    self.recache()
  File "/usr/lib/python3/dist-packages/matplotlib/lines.py", line 657, in recache
    y = _to_unmasked_float_array(yconv).ravel()
  File "/usr/lib/python3/dist-packages/matplotlib/cbook/__init__.py", line 1298, in _to_unmasked_float_array
    return np.asarray(x, float)
ValueError: only one element tensors can be converted to Python scalars
Traceback (most recent call last):
  File "/home/mespinoslonga/Documents/Project II - NSDTS Function Approximation/Power Demand Project/code/forecasting.py", line 51, in <module>
    net.prediction()
  File "/home/mespinoslonga/Documents/Project II - NSDTS Function Approximation/Power Demand Project/code/ANN.py", line 156, in prediction
    plt.plot(predictions, label="Predicted")
  File "/usr/lib/python3/dist-packages/matplotlib/pyplot.py", line 2757, in plot
    return gca().plot(
  File "/usr/lib/python3/dist-packages/matplotlib/axes/_axes.py", line 1634, in plot
    self.add_line(line)
  File "/usr/lib/python3/dist-packages/matplotlib/axes/_base.py", line 2283, in add_line
    self._update_line_limits(line)
  File "/usr/lib/python3/dist-packages/matplotlib/axes/_base.py", line 2306, in _update_line_limits
    path = line.get_path()
  File "/usr/lib/python3/dist-packages/matplotlib/lines.py", line 999, in get_path
    self.recache()
  File "/usr/lib/python3/dist-packages/matplotlib/lines.py", line 657, in recache
    y = _to_unmasked_float_array(yconv).ravel()
  File "/usr/lib/python3/dist-packages/matplotlib/cbook/__init__.py", line 1298, in _to_unmasked_float_array
    return np.asarray(x, float)
ValueError: only one element tensors can be converted to Python scalars